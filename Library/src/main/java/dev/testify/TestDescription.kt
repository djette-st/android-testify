/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2022 ndtp
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package dev.testify

import android.app.Instrumentation
import dev.testify.core.TestName

/**
 * Utility class for storing the current test description.
 * This is used to generate unique test names for each test.
 *
 * @param methodName The name of the test method
 * @param testClass The class containing the test method
 */
data class TestDescription(
    val methodName: String,
    val testClass: Class<*>
) {

    /**
     *  The [TestName] of the test method
     *  The TestName holds the simple class name and the method name
     */
    val nameComponents = TestName(testClass.simpleName, methodName)

    /**
     * The descriptive name of the test method
     * The name is generated by combining the simple class name and the method name with an underscore
     *
     * Example: `MainActivityTest_testButtonIsDisplayed`
     */
    val name = "${nameComponents.first}_${nameComponents.second}"

    /**
     * The fully qualified name of the test method
     * The name is generated by combining the canonical class name and the method name with a hash
     *
     * Example: `com.example.MainActivityTest#testButtonIsDisplayed`
     */
    val fullyQualifiedTestName = "${testClass.canonicalName}#$methodName"

    companion object {

        /**
         * The current [TestDescription]
         * The current test is defined as the test method that is currently executing.
         */
        internal var current: TestDescription? = null

        /**
         * The hashcode of the current [TestDescription]
         * This is used to ensure that the current [TestDescription] is tracked for the correct test
         */
        internal var hashCode: Int = 0
    }
}

/**
 * Extension property for [Instrumentation] to get the current [TestDescription] for the current test.
 */
var Instrumentation.testDescription: TestDescription
    /**
     * Set the current [TestDescription] for the current test.
     * This is called by [ScreenshotRule.apply] when a new test case starts.
     * The hashcode of the current [TestDescription] is stored to ensure that the current [TestDescription] is tracked for the correct test.
     */
    set(value) {
        TestDescription.hashCode = this.hashCode()
        TestDescription.current = value
    }
    /**
     * Get the current [TestDescription] for the currently executing test.
     *
     * @throws IllegalStateException if the current [TestDescription] is not valid for the currently executing test.
     * @throws UninitializedPropertyAccessException if the current [TestDescription] is not initialized.
     */
    get() {
        if (TestDescription.hashCode != this.hashCode())
            throw IllegalStateException("TestDescription is not initialized for $this")
        return TestDescription.current
            ?: throw UninitializedPropertyAccessException("TestDescription is not initialized")
    }
